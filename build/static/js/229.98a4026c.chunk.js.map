{"version":3,"sources":["views/apps/policy/policyType/EditPolicyType.js"],"names":["EditPolicyType","props","onEditorStateChange","editorState","setState","policyDescription","draftToHtml","convertToRaw","getCurrentContent","changeHandler","e","target","name","value","submitHandler","payload","pt_type","state","policyType","pt_type_desc","preventDefault","id","match","params","axiosConfig","post","then","response","console","log","swal","history","push","catch","error","EditorState","createEmpty","this","get","data","description","contentState","ContentState","createFromBlockArray","convertFromHTML","createWithContent","sm","listTag","href","tag","active","className","col-sm-6","render","onClick","onSubmit","lg","md","type","placeholder","onChange","toolbarClassName","wrapperClassName","editorClassName","defaultContentState","ReactHtmlParser","desc","toolbar","options","inline","bold","italic","underline","strikethrough","code","blockType","fontSize","fontFamily","style","marginLeft","Ripple","color","Component"],"mappings":"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","file":"static/js/229.98a4026c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n} from \"reactstrap\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nimport {\r\n  ContentState,\r\n  EditorState,\r\n  convertFromHTML,\r\n  convertToRaw,\r\n} from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport { Route } from \"react-router-dom\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport \"../../../../assets/scss/plugins/extensions/editor.scss\";\r\nimport swal from \"sweetalert\";\r\nexport default class EditPolicyType extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      policyType: \"\",\r\n      policyDescription: \"\",\r\n      editorState: EditorState.createEmpty(),\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let { id } = this.props.match.params;\r\n    axiosConfig\r\n      .get(`/admin/get_pt_one/${id}`)\r\n      .then((response) => {\r\n        const { pt_type, pt_type_desc } = response.data.data;\r\n        const description = pt_type_desc;\r\n        const contentState = ContentState.createFromBlockArray(\r\n          convertFromHTML(description)\r\n        );\r\n        const editorState = EditorState.createWithContent(contentState);\r\n        this.setState({\r\n          policyType: pt_type,\r\n          policyDescription: pt_type_desc,\r\n          editorState: editorState,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  }\r\n  onEditorStateChange = (editorState) => {\r\n    this.setState({\r\n      editorState,\r\n      policyDescription: draftToHtml(\r\n        convertToRaw(editorState.getCurrentContent())\r\n      ),\r\n    });\r\n  };\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  submitHandler = (e) => {\r\n    const payload = {\r\n      pt_type: this.state.policyType,\r\n      pt_type_desc: this.state.policyDescription,\r\n    };\r\n    e.preventDefault();\r\n    let { id } = this.props.match.params;\r\n    axiosConfig\r\n      .post(`/admin/edit_pt/${id}`, payload)\r\n      .then((response) => {\r\n        console.log(response);\r\n        swal(\"Success!\", \"Submitted SuccessFull!\", \"success\");\r\n        this.props.history.push(`/app/policy/PolicyTypeList`);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <div>\r\n              <Breadcrumb listTag=\"div\">\r\n                <BreadcrumbItem href=\"/\" tag=\"a\">\r\n                  Home\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem active>Edit PolicyType</BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 col-sm-6 className=\"float-left\">\r\n                Edit PolicyType\r\n              </h1>\r\n            </Col>\r\n            <Col>\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    className=\" btn btn-danger float-right\"\r\n                    onClick={() => history.push(\"/app/policy/PolicyTypeList\")}\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                )}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={this.submitHandler}>\r\n              <Row>\r\n                <Col lg=\"6\" md=\"6\" sm=\"12\" className=\"mb-2\">\r\n                  <Label>PolcyType </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"policyType\"\r\n                    placeholder=\"PolicyType\"\r\n                    value={this.state.policyType}\r\n                    onChange={this.changeHandler}\r\n                  />\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label>Descripition</Label>\r\n                  <Editor\r\n                    toolbarClassName=\"demo-toolbar-absolute\"\r\n                    wrapperClassName=\"demo-wrapper\"\r\n                    editorClassName=\"demo-editor\"\r\n                    editorState={this.state.editorState}\r\n                    onEditorStateChange={this.onEditorStateChange}\r\n                    defaultContentState={ReactHtmlParser(this.state.desc)}\r\n                    toolbar={{\r\n                      options: [\r\n                        \"inline\",\r\n                        \"blockType\",\r\n                        \"fontSize\",\r\n                        \"fontFamily\",\r\n                      ],\r\n                      inline: {\r\n                        options: [\r\n                          \"bold\",\r\n                          \"italic\",\r\n                          \"underline\",\r\n                          \"strikethrough\",\r\n                          \"monospace\",\r\n                        ],\r\n                        bold: { className: \"bordered-option-classname\" },\r\n                        italic: { className: \"bordered-option-classname\" },\r\n                        underline: { className: \"bordered-option-classname\" },\r\n                        strikethrough: {\r\n                          className: \"bordered-option-classname\",\r\n                        },\r\n                        code: { className: \"bordered-option-classname\" },\r\n                      },\r\n                      blockType: {\r\n                        className: \"bordered-option-classname\",\r\n                      },\r\n                      fontSize: {\r\n                        className: \"bordered-option-classname\",\r\n                      },\r\n                      fontFamily: {\r\n                        className: \"bordered-option-classname\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col\r\n                  lg=\"6\"\r\n                  md=\"6\"\r\n                  sm=\"6\"\r\n                  className=\"mb-2\"\r\n                  style={{ marginLeft: \"15px\" }}\r\n                >\r\n                  <Button.Ripple\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    className=\"mr-1 mb-1\"\r\n                  >\r\n                    Update PolicyType\r\n                  </Button.Ripple>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}