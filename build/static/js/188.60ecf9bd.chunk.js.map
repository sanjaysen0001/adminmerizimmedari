{"version":3,"sources":["views/apps/trade/GeneralNotifList.js"],"names":["GeneralNotifList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","title","unified","emoji","size","ReactHtmlParser","desc","className","img","src","alt","style","color","render","history","onClick","push","_id","runthisfunction","allNotificationList","axiosConfig","get","then","response","setState","onGridReady","gridApi","api","gridColumnApi","columnApi","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","this","id","swal","buttons","cancel","catch","text","value","sm","tag","length","right","placeholder","onChange","e","target","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/188.60ecf9bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\nimport swal from \"sweetalert\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\nimport { history } from \"../../../history\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { Emoji, EmojiStyle } from \"emoji-picker-react\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nclass GeneralNotifList extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 100,\r\n        filter: true,\r\n      },\r\n      {\r\n        headerName: \"Title \",\r\n        field: \"title\",\r\n        filter: true,\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.title}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Emoji \",\r\n        field: \"emoji\",\r\n        filter: true,\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>\r\n                <Emoji unified={params.data.emoji} size=\"25\" />\r\n              </span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Description \",\r\n        field: \"desc\",\r\n        filter: true,\r\n        width: 300,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{ReactHtmlParser(params.data.desc)}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Upload Image\",\r\n        field: \"img\",\r\n        width: 300,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"\">\r\n              {params.data.img[0] ? (\r\n                <img\r\n                  className=\"w-50  rounded-0\"\r\n                  src={params.data.img[0]}\r\n                  alt=\"No img\"\r\n                  width=\"100%\"\r\n                />\r\n              ) : (\r\n                <span style={{ color: \"red\" }}>No Image Available</span>\r\n              )}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        width: 200,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Edit\r\n                    className=\"mr-50\"\r\n                    color=\"blue\"\r\n                    size={20}\r\n                    onClick={() =>\r\n                      history.push(\r\n                        `/app/trade/editNotification/${params.data._id}`\r\n                      )\r\n                    }\r\n                  />\r\n                )}\r\n              />\r\n              <Trash2\r\n                size={20}\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  this.runthisfunction(params.data._id);\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.allNotificationList();\r\n  }\r\n\r\n  allNotificationList = () => {\r\n    axiosConfig.get(\"/admin/get_notification\").then((response) => {\r\n      const rowData = response.data.data;\r\n      this.setState({ rowData });\r\n    });\r\n  };\r\n  runthisfunction(id) {\r\n    swal(\r\n      `Do You Want To Delete Permanently`,\r\n      \"This item will be deleted immediately\",\r\n\r\n      {\r\n        buttons: {\r\n          cancel: \"Cancel\",\r\n          catch: { text: \"Delete \", value: \"catch\" },\r\n        },\r\n      }\r\n    ).then((value) => {\r\n      switch (value) {\r\n        case \"cancel\":\r\n          break;\r\n        case \"catch\":\r\n          axiosConfig.get(`/admin/dlt_notification/${id}`).then((response) => {\r\n            this.allNotificationList();\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <Row className=\"app-user-list\">\r\n        <Col sm=\"12\"></Col>\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <Row className=\"m-2\">\r\n              <Col>\r\n                <h1 sm=\"6\" className=\"float-left\">\r\n                  General Notification List\r\n                </h1>\r\n              </Col>\r\n              <Col>\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      className=\" btn btn-success float-right\"\r\n                      onClick={() => history.push(\"/app/trade/addGeneralNotif\")}\r\n                    >\r\n                      Add General Notification\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <CardBody>\r\n              {this.state.rowData === null ? null : (\r\n                <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                  <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                    <div className=\"mb-1\">\r\n                      <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                        <DropdownToggle tag=\"div\">\r\n                          {this.gridApi\r\n                            ? this.state.currenPageSize\r\n                            : \"\" * this.state.getPageSize -\r\n                              (this.state.getPageSize - 1)}{\" \"}\r\n                          -{\" \"}\r\n                          {this.state.rowData.length -\r\n                            this.state.currenPageSize * this.state.getPageSize >\r\n                          0\r\n                            ? this.state.currenPageSize * this.state.getPageSize\r\n                            : this.state.rowData.length}{\" \"}\r\n                          of {this.state.rowData.length}\r\n                          <ChevronDown className=\"ml-50\" size={15} />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(20)}\r\n                          >\r\n                            20\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(50)}\r\n                          >\r\n                            50\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(100)}\r\n                          >\r\n                            100\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(134)}\r\n                          >\r\n                            134\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                    <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                      <div className=\"table-input mr-1\">\r\n                        <Input\r\n                          placeholder=\"search...\"\r\n                          onChange={(e) =>\r\n                            this.updateSearchQuery(e.target.value)\r\n                          }\r\n                          value={this.state.value}\r\n                        />\r\n                      </div>\r\n                      <div className=\"export-btn\">\r\n                        <Button.Ripple\r\n                          color=\"primary\"\r\n                          onClick={() => this.gridApi.exportDataAsCsv()}\r\n                        >\r\n                          Export as CSV\r\n                        </Button.Ripple>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <ContextLayout.Consumer>\r\n                    {(context) => (\r\n                      <AgGridReact\r\n                        gridOptions={{}}\r\n                        rowSelection=\"multiple\"\r\n                        defaultColDef={defaultColDef}\r\n                        columnDefs={columnDefs}\r\n                        rowData={rowData}\r\n                        onGridReady={this.onGridReady}\r\n                        colResizeDefault={\"shift\"}\r\n                        animateRows={true}\r\n                        floatingFilter={false}\r\n                        pagination={true}\r\n                        paginationPageSize={this.state.paginationPageSize}\r\n                        pivotPanelShow=\"always\"\r\n                        enableRtl={context.state.direction === \"rtl\"}\r\n                      />\r\n                    )}\r\n                  </ContextLayout.Consumer>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default GeneralNotifList;\r\n"],"sourceRoot":""}