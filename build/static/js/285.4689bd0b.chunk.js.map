{"version":3,"sources":["views/apps/trade/notification/EditNotification.js"],"names":["EditNotification","useState","title","setTitle","selectedImage","setSelectedImage","selectedEmoji","setSelectedEmoji","setDesc","param","useParams","console","log","id","EditorState","createEmpty","editorState","setEditorState","useEffect","axiosConfig","get","then","response","data","emoji","desc","img","catch","error","className","render","history","onClick","push","onSubmit","e","preventDefault","FormData","append","draftToHtml","convertToRaw","getCurrentContent","post","swal","submitHandler","lg","md","sm","required","type","name","placeholder","value","onChange","target","accept","event","file","files","unified","emojiStyle","EmojiStyle","APPLE","size","onEmojiClick","emojiData","autoFocusSearch","NATIVE","height","toolbarClassName","wrapperClassName","editorClassName","onEditorStateChange","toolbar","options","inline","bold","italic","underline","strikethrough","code","blockType","fontSize","fontFamily","Ripple","color"],"mappings":"wXAoOeA,UA7Mf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CF,mBAAS,MAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAwBN,mBAAS,IAAjC,mBAAaO,GAAb,WACMC,EAAQC,cACdC,QAAQC,IAAIH,EAAMI,IAClB,MAAsCZ,oBAAS,kBAC7Ca,cAAYC,iBADd,mBAAOC,EAAP,KAAoBC,EAApB,KAqDA,OA3CAC,qBAAU,WACRC,IACGC,IADH,qCACqCX,EAAMI,KACxCQ,MAAK,SAACC,GACLnB,EAASmB,EAASC,KAAKA,KAAKrB,OAC5BK,EAAiBe,EAASC,KAAKA,KAAKC,OACpChB,EAAQc,EAASC,KAAKA,KAAKE,MAC3BpB,EAAiBiB,EAASC,KAAKA,KAAKG,IAAI,IACxCf,QAAQC,IAAIU,EAASC,KAAKA,KAAKC,UAEhCG,OAAM,SAACC,GACNjB,QAAQC,IAAIgB,QAEf,IA+BD,oCACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,UAAU,OACb,kBAAC,IAAD,KACE,wBAAIA,UAAU,cAAd,8BAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OACN,kBAAC,IAAD,CACEF,UAAU,8BACVG,QAAS,kBAAMD,EAAQE,KAAK,iCAF9B,aAUR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMJ,UAAU,MAAMK,SAAU,SAACC,GAAD,OAnDpB,SAACA,GACrBA,EAAEC,iBAEFzB,QAAQC,IAAIN,GACZ,IAAIiB,EAAO,IAAIc,SACfd,EAAKe,OAAO,QAASpC,GACrBqB,EAAKe,OAAO,QAAShC,GACrBiB,EAAKe,OACH,OACAC,IAAYC,uBAAaxB,EAAYyB,uBAEjB,OAAlBrC,GACFmB,EAAKe,OAAO,MAAOlC,GAErBe,IACGuB,KADH,mCACoCjC,EAAMI,IAAMU,GAC7CF,MAAK,SAACC,GACLX,QAAQC,IAAIU,EAASC,KAAKA,KAAKC,OAC/BmB,IAAK,WAAY,yBAA0B,cAE5ChB,OAAM,SAACC,GACNjB,QAAQC,IAAIgB,MA8B+BgB,CAAcT,KACnD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKU,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIlB,UAAU,QAClC,kBAAC,IAAD,cACA,kBAAC,IAAD,CACEmB,UAAQ,EACRC,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,MAAOlD,EACPmD,SAAU,SAAClB,GAAD,OAAOhC,EAASgC,EAAEmB,OAAOF,WAiBvC,kBAAC,IAAD,CAAKP,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIlB,UAAU,QAClC,kBAAC,IAAD,cACA,kBAAC,IAAD,CACEoB,KAAK,OACLC,KAAK,MACLK,OAAO,UACPF,SA5DQ,SAACG,GACzB,IAAMC,EAAOD,EAAMF,OAAOI,MAAM,GAChC/C,QAAQC,IAAI6C,GACZpD,EAAiBoD,OA4DL,kBAAC,IAAD,CAAKZ,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIlB,UAAU,QAClC,yBAAKA,UAAU,IACb,yBAAKA,UAAU,cAAf,0BAEGvB,EACC,kBAAC,IAAD,CACEqD,QAASrD,EACTsD,WAAYC,IAAWC,MACvBC,KAAM,KAEN,MAEN,6BACE,kBAAC,IAAD,CACEC,aAtHtB,SAAqBC,GACnB1D,EAAiB0D,EAAUN,UAsHPO,iBAAiB,EACjBN,WAAYC,IAAWM,OACvBC,OAAO,aAKf,kBAAC,IAAD,CAAKvB,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIlB,UAAU,QAClC,kBAAC,SAAD,CACEA,UAAU,eACVwC,iBAAiB,wBACjBC,iBAAiB,eACjBC,gBAAgB,cAChBvD,YAAaA,EACbwD,oBAzIU,SAACxD,GAC3B,OAAOC,EAAeD,IAyINyD,QAAS,CACPC,QAAS,CACP,SACA,YACA,WACA,cAEFC,OAAQ,CACND,QAAS,CACP,OACA,SACA,YACA,gBACA,aAEFE,KAAM,CAAE/C,UAAW,6BACnBgD,OAAQ,CAAEhD,UAAW,6BACrBiD,UAAW,CAAEjD,UAAW,6BACxBkD,cAAe,CACblD,UAAW,6BAEbmD,KAAM,CAAEnD,UAAW,8BAErBoD,UAAW,CACTpD,UAAW,6BAEbqD,SAAU,CACRrD,UAAW,6BAEbsD,WAAY,CACVtD,UAAW,kCAOrB,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKgB,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIlB,UAAU,QAClC,kBAAC,IAAOuD,OAAR,CACEC,MAAM,UACNpC,KAAK,SACLpB,UAAU,aAHZ","file":"static/js/285.4689bd0b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  CustomInput,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport { Route, useParams } from \"react-router-dom\";\r\nimport swal from \"sweetalert\";\r\nimport EmojiPicker, { EmojiStyle, Emoji } from \"emoji-picker-react\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { EditorState, convertToRaw } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport \"../../../../assets/scss/plugins/extensions/editor.scss\";\r\nfunction EditNotification() {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [selectedEmoji, setSelectedEmoji] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const param = useParams();\r\n  console.log(param.id);\r\n  const [editorState, setEditorState] = useState(() =>\r\n    EditorState.createEmpty()\r\n  );\r\n  const onEditorStateChange = (editorState) => {\r\n    return setEditorState(editorState);\r\n  };\r\n\r\n  function handleEmoji(emojiData) {\r\n    setSelectedEmoji(emojiData.unified);\r\n  }\r\n  useEffect(() => {\r\n    axiosConfig\r\n      .get(`/admin/getone_notification/${param.id}`)\r\n      .then((response) => {\r\n        setTitle(response.data.data.title);\r\n        setSelectedEmoji(response.data.data.emoji);\r\n        setDesc(response.data.data.desc);\r\n        setSelectedImage(response.data.data.img[0]);\r\n        console.log(response.data.data.emoji);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(selectedEmoji);\r\n    let data = new FormData();\r\n    data.append(\"title\", title);\r\n    data.append(\"emoji\", selectedEmoji);\r\n    data.append(\r\n      \"desc\",\r\n      draftToHtml(convertToRaw(editorState.getCurrentContent()))\r\n    );\r\n    if (selectedImage !== null) {\r\n      data.append(\"img\", selectedImage);\r\n    }\r\n    axiosConfig\r\n      .post(`/admin/edit_notification/${param.id}`, data)\r\n      .then((response) => {\r\n        console.log(response.data.data.emoji);\r\n        swal(\"Success!\", \"Submitted SuccessFull!\", \"success\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const handleImageChange = (event) => {\r\n    const file = event.target.files[0];\r\n    console.log(file);\r\n    setSelectedImage(file);\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Edit General Notification</h1>\r\n            </Col>\r\n            <Col>\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    className=\" btn btn-danger float-right\"\r\n                    onClick={() => history.push(\"/app/trade/generalNotifList\")}\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                )}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={(e) => submitHandler(e)}>\r\n              <Row>\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label>Title</Label>\r\n                  <Input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                  ></Input>\r\n                </Col>\r\n                {/* <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label>URL</Label>\r\n                  <Input\r\n                    required\r\n                    type=\"text\"\r\n                    name=\"url\"\r\n                    placeholder=\"Url\"\r\n                    value={url}\r\n                    onChange={(e) => {\r\n                      console.log(e.target.value);\r\n                      setUrl(e.target.value);\r\n                    }}\r\n                  ></Input>\r\n                </Col> */}\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label>Image</Label>\r\n                  <CustomInput\r\n                    type=\"file\"\r\n                    name=\"img\"\r\n                    accept=\"image/*\"\r\n                    onChange={handleImageChange}\r\n                  />\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <div className=\"\">\r\n                    <div className=\"show-emoji\">\r\n                      Your selected Emoji is:\r\n                      {selectedEmoji ? (\r\n                        <Emoji\r\n                          unified={selectedEmoji}\r\n                          emojiStyle={EmojiStyle.APPLE}\r\n                          size={22}\r\n                        />\r\n                      ) : null}\r\n                    </div>\r\n                    <div>\r\n                      <EmojiPicker\r\n                        onEmojiClick={handleEmoji}\r\n                        autoFocusSearch={false}\r\n                        emojiStyle={EmojiStyle.NATIVE}\r\n                        height=\"400px\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Editor\r\n                    className=\"form-control\"\r\n                    toolbarClassName=\"demo-toolbar-absolute\"\r\n                    wrapperClassName=\"demo-wrapper\"\r\n                    editorClassName=\"demo-editor\"\r\n                    editorState={editorState}\r\n                    onEditorStateChange={onEditorStateChange}\r\n                    toolbar={{\r\n                      options: [\r\n                        \"inline\",\r\n                        \"blockType\",\r\n                        \"fontSize\",\r\n                        \"fontFamily\",\r\n                      ],\r\n                      inline: {\r\n                        options: [\r\n                          \"bold\",\r\n                          \"italic\",\r\n                          \"underline\",\r\n                          \"strikethrough\",\r\n                          \"monospace\",\r\n                        ],\r\n                        bold: { className: \"bordered-option-classname\" },\r\n                        italic: { className: \"bordered-option-classname\" },\r\n                        underline: { className: \"bordered-option-classname\" },\r\n                        strikethrough: {\r\n                          className: \"bordered-option-classname\",\r\n                        },\r\n                        code: { className: \"bordered-option-classname\" },\r\n                      },\r\n                      blockType: {\r\n                        className: \"bordered-option-classname\",\r\n                      },\r\n                      fontSize: {\r\n                        className: \"bordered-option-classname\",\r\n                      },\r\n                      fontFamily: {\r\n                        className: \"bordered-option-classname\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <br />\r\n              <Row>\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Button.Ripple\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    className=\"mr-1 mb-1\"\r\n                  >\r\n                    Edit General Notification\r\n                  </Button.Ripple>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditNotification;\r\n\r\n// import React from \"react\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Col,\r\n//   Row,\r\n//   Form,\r\n//   Button,\r\n//   Label,\r\n//   Input,\r\n// } from \"reactstrap\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n// import { EditorState, convertToRaw, RichUtils } from \"draft-js\";\r\n// import { Editor } from \"react-draft-wysiwyg\";\r\n// import draftToHtml from \"draftjs-to-html\";\r\n// import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\n// import \"../../../../assets/scss/plugins/extensions/editor.scss\";\r\n// import axiosConfig from \"../../../../axiosConfig\";\r\n// import { history } from \"../../../../history\";\r\n// import swal from \"sweetalert\";\r\n// import { Route } from \"react-router-dom\";\r\n// import ReactHtmlParser from \"react-html-parser\";\r\n// import EmojiPicker, { EmojiStyle, Emoji } from \"emoji-picker-react\";\r\n// class EditNotification extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       title: \"\",\r\n//       emoji: \"\",\r\n//       desc: \"\",\r\n//       editorState: EditorState.createEmpty(),\r\n//       image: \"\",\r\n//     };\r\n//   }\r\n//   onEditorStateChange = (editorState) => {\r\n//     this.setState({\r\n//       editorState,\r\n//       desc: draftToHtml(convertToRaw(editorState.getCurrentContent())),\r\n//     });\r\n//   };\r\n\r\n//   handleKeyCommand(command, editorState) {\r\n//     const newState = RichUtils.handleKeyCommand(editorState, command);\r\n\r\n//     if (newState) {\r\n//       this.onChange(newState);\r\n//       return \"handled\";\r\n//     }\r\n\r\n//     return \"not-handled\";\r\n//   }\r\n//   componentDidMount() {\r\n//     let { id } = this.props.match.params;\r\n//     console.log(id);\r\n//     axiosConfig\r\n//       .get(`/admin/getone_notification/${id}`)\r\n//       .then((response) => {\r\n//         console.log(response.data.data);\r\n//         this.setState({\r\n//           desc: response.data.data.desc,\r\n//           title: response.data.data.title,\r\n//           emoji: response.data.data.emoji,\r\n//           image: response.data.data.img[0],\r\n//         });\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(error);\r\n//       });\r\n//   }\r\n\r\n//   changeHandler = (e) => {\r\n//     this.setState({ [e.target.name]: e.target.value });\r\n//   };\r\n//   submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     let { id } = this.props.match.params;\r\n//     const data = new FormData();\r\n//     data.append(\"title\", this.state.title);\r\n//     data.append(\"desc\", this.state.desc);\r\n//     data.append(\"image\", this.state.img);\r\n//     console.log(id);\r\n//     axiosConfig\r\n//       .post(`/admin/edit_notification/${id}`, this.state)\r\n//       .then((response) => {\r\n//         console.log(response);\r\n//         swal(\"Success!\", \"Submitted SuccessFull!\", \"success\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(error.response.data);\r\n//       });\r\n//   };\r\n\r\n//   render() {\r\n//     const { editorState } = this.state;\r\n//     return (\r\n//       <Card>\r\n//         <Row className=\"m-2\">\r\n//           <Col>\r\n//             <h1 col-sm-6 className=\"float-left\">\r\n//               Edit Notification\r\n//             </h1>\r\n//           </Col>\r\n//           <Col>\r\n//             <Route\r\n//               render={({ history }) => (\r\n//                 <Button\r\n//                   className=\" btn btn-danger float-right\"\r\n//                   onClick={() => history.push(\"/app/trade/generalNotifList\")}\r\n//                 >\r\n//                   Back\r\n//                 </Button>\r\n//               )}\r\n//             />\r\n//           </Col>\r\n//         </Row>\r\n//         <CardBody>\r\n//           <Form onSubmit={this.submitHandler}>\r\n//             <Row>\r\n//               <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n//                 <Label>Title</Label>\r\n//                 <Input\r\n//                   required\r\n//                   type=\"text\"\r\n//                   name=\"value\"\r\n//                   placeholder=\"Title\"\r\n//                   value={this.state.title}\r\n//                   onChange={this.changeHandler}\r\n//                 />\r\n//               </Col>\r\n//               <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n//                 <Label>Image</Label>\r\n\r\n//                 <Input type=\"file\" name=\"image\" onChange={this.changeHandler} />\r\n//               </Col>\r\n//             </Row>\r\n//             <Editor\r\n//               editorState={editorState}\r\n//               handleKeyCommand={this.handleKeyCommand}\r\n//               onEditorStateChange={this.onEditorStateChange}\r\n//               toolbarClassName=\"demo-toolbar-absolute\"\r\n//               wrapperClassName=\"demo-wrapper\"\r\n//               editorClassName=\"demo-editor\"\r\n//               toolbar={{\r\n//                 options: [\"inline\", \"blockType\", \"fontSize\", \"fontFamily\"],\r\n//                 inline: {\r\n//                   options: [\r\n//                     \"bold\",\r\n//                     \"italic\",\r\n//                     \"underline\",\r\n//                     \"strikethrough\",\r\n//                     \"monospace\",\r\n//                   ],\r\n//                   bold: { className: \"bordered-option-classname\" },\r\n//                   italic: { className: \"bordered-option-classname\" },\r\n//                   underline: { className: \"bordered-option-classname\" },\r\n//                   strikethrough: { className: \"bordered-option-classname\" },\r\n//                   code: { className: \"bordered-option-classname\" },\r\n//                 },\r\n//                 blockType: {\r\n//                   className: \"bordered-option-classname\",\r\n//                 },\r\n//                 fontSize: {\r\n//                   className: \"bordered-option-classname\",\r\n//                 },\r\n//                 fontFamily: {\r\n//                   className: \"bordered-option-classname\",\r\n//                 },\r\n//               }}\r\n//             />\r\n//             <br />\r\n//             <Button color=\"primary\">Submit</Button>\r\n//           </Form>\r\n//         </CardBody>\r\n//       </Card>\r\n//     );\r\n//   }\r\n// }\r\n// export default EditNotification;\r\n"],"sourceRoot":""}