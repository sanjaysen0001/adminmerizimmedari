{"version":3,"sources":["views/apps/premium/PaidServiceList.js"],"names":["PaidServeiceList","state","rowData","desc","editorState","EditorState","createEmpty","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","cellRendererFramework","params","className","ReactHtmlParser","data","render","history","size","color","onClick","push","_id","runthisfunction","onEditorStateChange","console","log","setState","draftToHtml","convertToRaw","getCurrentContent","changeHandler","e","target","name","value","getServiceData","axiosConfig","get","then","response","catch","error","onGridReady","gridApi","api","gridColumnApi","columnApi","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","this","id","swal","buttons","cancel","text","Fragment","sm","tag","length","right","placeholder","onChange","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/232.f7d60dc8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Form,\r\n  Col,\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\nimport swal from \"sweetalert\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nimport { ChevronDown, Trash2, Edit } from \"react-feather\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport { EditorState, convertToRaw } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport \"../../../assets/scss/plugins/extensions/editor.scss\";\r\nclass PaidServeiceList extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    desc: \"\",\r\n    editorState: EditorState.createEmpty(),\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 100,\r\n      },\r\n\r\n      {\r\n        headerName: \"Descripiton\",\r\n        field: \"desc\",\r\n        width: 300,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{ReactHtmlParser(params.data.desc)}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Actions\",\r\n        width: 200,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Edit\r\n                    className=\"mr-50\"\r\n                    size=\"25px\"\r\n                    color=\"blue\"\r\n                    onClick={() =>\r\n                      history.push(\r\n                        `/app/premium/editPaidService/${params.data._id}`\r\n                      )\r\n                    }\r\n                  />\r\n                )}\r\n              />\r\n              <Trash2\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  this.runthisfunction(params.data._id);\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  onEditorStateChange = (editorState) => {\r\n    console.log(editorState);\r\n    this.setState({\r\n      editorState,\r\n      desc: draftToHtml(convertToRaw(editorState.getCurrentContent())),\r\n    });\r\n  };\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  // submitHandler = (e) => {\r\n  //   e.preventDefault();\r\n  //   let payload = {\r\n  //     desc: this.state.desc,\r\n  //   };\r\n  //   // console.log(this.state.desc);\r\n  //   axiosConfig\r\n  //     .post(\"/admin/addPrmiumSrvc\", payload)\r\n  //     .then((response) => {\r\n  //       console.log(response.data.data);\r\n  //       swal(\"Good job!\", \"You clicked the button!\", \"success\");\r\n  //       this.setState({ editorState: \"\" });\r\n  //       this.getServiceData();\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(error);\r\n  //     });\r\n  // };\r\n  componentDidMount() {\r\n    this.getServiceData();\r\n  }\r\n  getServiceData = () => {\r\n    axiosConfig\r\n      .get(`/admin/serviceslist`)\r\n      .then((response) => {\r\n        let rowData = response.data.data;\r\n        // JSON.stringify(rowData);\r\n        this.setState({ rowData });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  };\r\n\r\n  runthisfunction(id) {\r\n    swal(\r\n      `Do You Want To Delete Permanently`,\r\n      \"This item will be deleted immediately\",\r\n\r\n      {\r\n        buttons: {\r\n          cancel: \"Cancel\",\r\n          catch: { text: \"Delete \", value: \"catch\" },\r\n        },\r\n      }\r\n    ).then((value) => {\r\n      switch (value) {\r\n        case \"cancel\":\r\n          break;\r\n        case \"catch\":\r\n          axiosConfig.get(`/admin/dltPsrvc/${id}`).then((response) => {\r\n            this.getServiceData();\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Card className=\"overflow-hidden agGrid-card\">\r\n          {/* <CardBody>\r\n            <Form onSubmit={this.submitHandler}>\r\n              <Editor\r\n                toolbarClassName=\"demo-toolbar-absolute\"\r\n                wrapperClassName=\"demo-wrapper\"\r\n                editorClassName=\"demo-editor\"\r\n                editorState={this.state.editorState}\r\n                onEditorStateChange={this.onEditorStateChange}\r\n                toolbar={{\r\n                  options: [\"inline\", \"blockType\", \"fontSize\", \"fontFamily\"],\r\n                  inline: {\r\n                    options: [\r\n                      \"bold\",\r\n                      \"italic\",\r\n                      \"underline\",\r\n                      \"strikethrough\",\r\n                      \"monospace\",\r\n                    ],\r\n                    bold: { className: \"bordered-option-classname\" },\r\n                    italic: { className: \"bordered-option-classname\" },\r\n                    underline: { className: \"bordered-option-classname\" },\r\n                    strikethrough: { className: \"bordered-option-classname\" },\r\n                    code: { className: \"bordered-option-classname\" },\r\n                  },\r\n                  blockType: {\r\n                    className: \"bordered-option-classname\",\r\n                  },\r\n                  fontSize: {\r\n                    className: \"bordered-option-classname\",\r\n                  },\r\n                  fontFamily: {\r\n                    className: \"bordered-option-classname\",\r\n                  },\r\n                }}\r\n              />\r\n              <br />\r\n              <Button color=\"primary\"> Add Paid Serveice</Button>\r\n            </Form>\r\n          </CardBody> */}\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 sm=\"6\" className=\"float-left\">\r\n                Paid Service List\r\n              </h1>\r\n            </Col>\r\n          </Row>\r\n          <CardBody className=\"py-0\">\r\n            {this.state.rowData === null ? null : (\r\n              <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                  <div className=\"mb-1\">\r\n                    <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                      <DropdownToggle tag=\"div\">\r\n                        {this.gridApi\r\n                          ? this.state.currenPageSize\r\n                          : \"\" * this.state.getPageSize -\r\n                            (this.state.getPageSize - 1)}{\" \"}\r\n                        -{\" \"}\r\n                        {this.state.rowData.length -\r\n                          this.state.currenPageSize * this.state.getPageSize >\r\n                        0\r\n                          ? this.state.currenPageSize * this.state.getPageSize\r\n                          : this.state.rowData.length}{\" \"}\r\n                        of {this.state.rowData.length}\r\n                        <ChevronDown className=\"ml-50\" size={15} />\r\n                      </DropdownToggle>\r\n                      <DropdownMenu right>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(20)}\r\n                        >\r\n                          20\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(50)}\r\n                        >\r\n                          50\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(100)}\r\n                        >\r\n                          100\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(134)}\r\n                        >\r\n                          134\r\n                        </DropdownItem>\r\n                      </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                  </div>\r\n                  <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                    <div className=\"table-input mr-1\">\r\n                      <Input\r\n                        placeholder=\"search...\"\r\n                        onChange={(e) => this.updateSearchQuery(e.target.value)}\r\n                        value={this.state.value}\r\n                      />\r\n                    </div>\r\n                    <div className=\"export-btn\">\r\n                      <Button.Ripple\r\n                        color=\"primary\"\r\n                        onClick={() => this.gridApi.exportDataAsCsv()}\r\n                      >\r\n                        Export as CSV\r\n                      </Button.Ripple>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <ContextLayout.Consumer>\r\n                  {(context) => (\r\n                    <AgGridReact\r\n                      gridOptions={{}}\r\n                      rowSelection=\"multiple\"\r\n                      defaultColDef={defaultColDef}\r\n                      columnDefs={columnDefs}\r\n                      rowData={rowData}\r\n                      onGridReady={this.onGridReady}\r\n                      colResizeDefault={\"shift\"}\r\n                      animateRows={true}\r\n                      floatingFilter={false}\r\n                      pagination={true}\r\n                      paginationPageSize={this.state.paginationPageSize}\r\n                      pivotPanelShow=\"always\"\r\n                      enableRtl={context.state.direction === \"rtl\"}\r\n                    />\r\n                  )}\r\n                </ContextLayout.Consumer>\r\n              </div>\r\n            )}\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default PaidServeiceList;\r\n"],"sourceRoot":""}