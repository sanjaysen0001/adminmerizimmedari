{"version":3,"sources":["views/apps/report/Report.js"],"names":["Report","state","rowData","StartDate","EndDate","list","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","data","active_value","moment","updatedAt","format","FT1_type","FT2_type","FT3_type","t1_type","t2_type","t3_type","t4_type","trl_type","t5_type","sl_type","pinned","window","innerWidth","size","color","onClick","runthisfunction","_id","changeHandlerStartDate","e","startDate","target","value","setState","changeHandlerEndDate","endDate","onGridReady","gridApi","api","gridColumnApi","columnApi","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","handleSelectDate","name","console","log","submitHandler","axiosConfig","get","then","response","catch","error","id","swal","buttons","cancel","text","alltradeList","this","lg","md","sm","col-sm-6","type","onChange","tag","length","right","placeholder","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/251.cfa7740c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Label,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\n\r\nimport axiosConfig from \"../../../axiosConfig\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\nimport swal from \"sweetalert\";\r\nimport { history } from \"../../../history\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../assets/scss/pages/users.scss\";\r\nimport moment from \"moment\";\r\nclass Report extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    StartDate: \"\",\r\n    EndDate: \"\",\r\n    list: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 100,\r\n        filter: true,\r\n      },\r\n\r\n      {\r\n        headerName: \"Plan Name\",\r\n        field: \"PlanName\",\r\n        width: 140,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex  align-items-center cursor-pointer\">\r\n              <span>Plan Name</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Active Value\",\r\n        field: \"active_value\",\r\n        width: 140,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.active_value}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Date\",\r\n        field: \"updatedAt\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{moment(params.data.updatedAt).format(\"ll\")} </span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"status \",\r\n        field: \"tradeStatus\",\r\n        filter: true,\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return params?.data?.FT1_type === \"true\" ||\r\n            params?.data?.FT2_type === \"true\" ||\r\n            params?.data?.FT3_type === \"true\" ||\r\n            params?.data?.t1_type === \"true\" ||\r\n            params?.data?.t2_type === \"true\" ||\r\n            params?.data?.t3_type === \"true\" ||\r\n            params?.data?.t4_type === \"true\" ||\r\n            params?.data?.trl_type === \"true\" ||\r\n            params?.data?.t5_type === \"true\" ? (\r\n            <div className=\"badge badge-pill badge-success\">Completed</div>\r\n          ) : params?.data?.sl_type === \"true\" ? (\r\n            <div className=\"badge badge-pill badge-danger\">Completed</div>\r\n          ) : null;\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        width: 150,\r\n        pinned: window.innerWidth > 992 ? \"right\" : false,\r\n\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Trash2\r\n                size={20}\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  this.runthisfunction(params.data._id);\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   this.alltradeList();\r\n  // }\r\n  changeHandlerStartDate = (e) => {\r\n    const startDate = moment(e.target.value).format(\"D-MM-YYYY\");\r\n    this.setState({ StartDate: startDate });\r\n  };\r\n  changeHandlerEndDate = (e) => {\r\n    const endDate = moment(e.target.value).format(\"D-MM-YYYY\");\r\n    this.setState({ EndDate: endDate });\r\n  };\r\n  // alltradeList = () => {\r\n  //   axiosConfig.get(`/admin/tradelist`).then((response) => {\r\n  //     console.log(response.data.data);\r\n  //     const rowDataList = response.data.data;\r\n  //     const rowData = rowDataList.filter((value) => {\r\n  //       if (\r\n  //         value.FT1_type === \"true\" ||\r\n  //         value?.FT2_type === \"true\" ||\r\n  //         value?.FT3_type === \"true\" ||\r\n  //         value?.t1_type === \"true\" ||\r\n  //         value?.t2_type === \"true\" ||\r\n  //         value?.t3_type === \"true\" ||\r\n  //         value?.t4_type === \"true\" ||\r\n  //         value?.trl_type === \"true\" ||\r\n  //         value?.t5_type === \"true\" ||\r\n  //         value?.sl_type === \"true\"\r\n  //       ) {\r\n  //         return value;\r\n  //       }\r\n  //     });\r\n  //     console.log(\"NewList\", rowData);\r\n  //     const list = response.data.data;\r\n  //     this.setState({ rowData });\r\n  //     this.setState({ list });\r\n  //   });\r\n  // };\r\n  runthisfunction(id) {\r\n    swal(\r\n      `Do You Want To Delete Permanently`,\r\n      \"This item will be deleted immediately\",\r\n\r\n      {\r\n        buttons: {\r\n          cancel: \"Cancel\",\r\n          catch: { text: \"Delete \", value: \"catch\" },\r\n        },\r\n      }\r\n    ).then((value) => {\r\n      switch (value) {\r\n        case \"cancel\":\r\n          break;\r\n        case \"catch\":\r\n          axiosConfig.get(`/admin/dlt_alltrade/${id}`).then(() => {\r\n            this.alltradeList();\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSelectDate = (e) => {\r\n    const { name, value } = e.target;\r\n    console.log(name, value);\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    console.log(this.state.StartDate, this.state.EndDate);\r\n    axiosConfig\r\n      .get(\r\n        `/user/tradefilterBydate?start=${this.state.StartDate}&end=${this.state.EndDate}`\r\n      )\r\n      .then((response) => {\r\n        this.setState({ rowData: response.data.data });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <Row className=\"app-user-list \">\r\n        <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n          <Card>\r\n            <h1 col-sm-6 className=\"p-2\">\r\n              Agent Report\r\n            </h1>\r\n            <Row className=\"p-2\">\r\n              <Col lg=\"4\" md=\"4\" sm=\"4\" className=\"\">\r\n                <Label>StartDate:</Label>\r\n                <Input\r\n                  type=\"date\"\r\n                  name=\"StartDate\"\r\n                  value={this.state.StartDate}\r\n                  onChange={this.handleSelectDate}\r\n                />\r\n              </Col>\r\n              <Col lg=\"4\" md=\"4\" sm=\"4\" className=\"\">\r\n                <Label>EndDate:</Label>\r\n                <Input\r\n                  type=\"date\"\r\n                  name=\"EndDate\"\r\n                  value={this.state.EndDate}\r\n                  onChange={this.handleSelectDate}\r\n                />\r\n              </Col>\r\n              <Col lg=\"4\" md=\"4\" sm=\"4\" className=\"mt-1\">\r\n                <Button color=\"primary\" onClick={this.submitHandler}>\r\n                  Submit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <CardBody>\r\n              {this.state.rowData === null ? null : (\r\n                <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                  <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                    <div className=\"mb-1\">\r\n                      <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                        <DropdownToggle tag=\"div\">\r\n                          {this.gridApi\r\n                            ? this.state.currenPageSize\r\n                            : \"\" * this.state.getPageSize -\r\n                              (this.state.getPageSize - 1)}{\" \"}\r\n                          -{\" \"}\r\n                          {this.state.rowData.length -\r\n                            this.state.currenPageSize * this.state.getPageSize >\r\n                          0\r\n                            ? this.state.currenPageSize * this.state.getPageSize\r\n                            : this.state.rowData.length}{\" \"}\r\n                          of {this.state.rowData.length}\r\n                          <ChevronDown className=\"ml-50\" size={15} />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(20)}\r\n                          >\r\n                            20\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(50)}\r\n                          >\r\n                            50\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(100)}\r\n                          >\r\n                            100\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(134)}\r\n                          >\r\n                            134\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                    <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                      <div className=\"table-input mr-1\">\r\n                        <Input\r\n                          placeholder=\"search...\"\r\n                          onChange={(e) =>\r\n                            this.updateSearchQuery(e.target.value)\r\n                          }\r\n                          value={this.state.value}\r\n                        />\r\n                      </div>\r\n                      <div className=\"export-btn\">\r\n                        <Button.Ripple\r\n                          color=\"primary\"\r\n                          onClick={() => this.gridApi.exportDataAsCsv()}\r\n                        >\r\n                          Export as CSV\r\n                        </Button.Ripple>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <ContextLayout.Consumer>\r\n                    {(context) => (\r\n                      <AgGridReact\r\n                        gridOptions={{}}\r\n                        rowSelection=\"multiple\"\r\n                        defaultColDef={defaultColDef}\r\n                        columnDefs={columnDefs}\r\n                        rowData={rowData}\r\n                        onGridReady={this.onGridReady}\r\n                        colResizeDefault={\"shift\"}\r\n                        animateRows={true}\r\n                        floatingFilter={false}\r\n                        pagination={true}\r\n                        paginationPageSize={this.state.paginationPageSize}\r\n                        pivotPanelShow=\"always\"\r\n                        enableRtl={context.state.direction === \"rtl\"}\r\n                      />\r\n                    )}\r\n                  </ContextLayout.Consumer>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default Report;\r\n"],"sourceRoot":""}